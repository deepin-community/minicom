diff --git a/src/minicom.c b/src/minicom.c
index 9b166dc13ebed70122bb3cbfa783e924af4e8e3c..2719f8cce5a3edf42b34918a870299004d813d21 100644
--- a/src/minicom.c
+++ b/src/minicom.c
@@ -231,15 +231,15 @@ void drawhist_look(WIN *w, int y, int r, wchar_t *look, int case_matters)
 {
   int f;
   ELM *tmp_e;
-  wchar_t tmp_line[MAXCOLS];
 
-  tmp_line[0]='\0';
   w->direct = 0;
   for (f = 0; f < w->ys; f++) {
     tmp_e = mc_getline(w, y++);
 
+    wchar_t *tmp_line;
+
     /* First we "accumulate" the line into a variable */
-    mc_wdrawelm_var(w, tmp_e, tmp_line);
+    mc_wdrawelm_var(w, tmp_e, &tmp_line);
 
     /* Does it have what we want? */
     if (wcslen(look) > 1 && wcslen(tmp_line) > 1) {
@@ -248,6 +248,8 @@ void drawhist_look(WIN *w, int y, int r, wchar_t *look, int case_matters)
       else
         mc_wdrawelm(w, f, tmp_e); /* 'normal' output */
     }
+
+    free(tmp_line);
   }
 
   if (r)
@@ -315,14 +317,11 @@ int find_next(WIN *w, WIN *w_hist,
 {
   int next_line;
   ELM *tmp_e;
-  wchar_t tmp_line[MAXCOLS];
   int all_lines;
 
   if (!look)
     return(++hit_line); /* next line */
 
-  tmp_line[0] = '\0';	/* Personal phobia, I need to do this.. */
-
   hit_line++;           /* we NEED this so we don't search only same line! */
   all_lines = w->histlines + w_hist->ys;
 
@@ -335,16 +334,23 @@ int find_next(WIN *w, WIN *w_hist,
     /* we do 'something' here... :-) */
     tmp_e = mc_getline(w_hist, next_line);
 
+    wchar_t *tmp_line;
+
     /*
      * First we "accumulate" the line into a variable.
      * To see 'why', see what an 'ELM' structure looks like!
      */
-    mc_wdrawelm_var(w, tmp_e, tmp_line);
+    mc_wdrawelm_var(w, tmp_e, &tmp_line);
 
     /* Does it have what we want? */
     if (wcslen(tmp_line) > 1 && wcslen(look) > 1)
       if (StrStr(tmp_line, look, case_matters))
-        return next_line;
+        {
+          free(tmp_line);
+          return next_line;
+        }
+
+    free(tmp_line);
   }
 
   if (hit_line >= all_lines) {	/* Make sure we've got a valid line! */
@@ -403,7 +409,6 @@ static void drawcite_whole(WIN *w, int y, int start, int end)
 
 static void do_cite(WIN *w, int start, int end)
 {
-  wchar_t tmp_line[MAXCOLS];
   ELM *tmp_e;
   int x, y;
 
@@ -411,7 +416,8 @@ static void do_cite(WIN *w, int start, int end)
     vt_send('>');
     vt_send(' ');
     tmp_e = mc_getline(w, y);
-    mc_wdrawelm_var(w, tmp_e, tmp_line);
+    wchar_t *tmp_line;
+    mc_wdrawelm_var(w, tmp_e, &tmp_line);
     tmp_line[w->xs] = 0;
     for (x = w->xs-1; x >= 0; x--) {
       if (tmp_line[x] <= ' ')
@@ -428,6 +434,7 @@ static void do_cite(WIN *w, int start, int end)
         vt_send(buf[i]);
     }
     vt_send(13);
+    free(tmp_line);
   }
 }
 
@@ -439,7 +446,6 @@ static void scrollback(void)
   ELM *tmp_e;
   int case_matters=0;	/* fmg: case-importance, needed for 'N' */
   static wchar_t look_for[MAX_SEARCH];	/* fmg: last used search pattern */
-  wchar_t tmp_line[MAXCOLS];
   int citemode = 0;
   int cite_ystart = 1000000,
       cite_yend = -1,
@@ -614,9 +620,11 @@ static void scrollback(void)
           tmp_e = mc_getline(b_us, y);
           if (wcslen(look_for) > 1) {
             /* quick scan for pattern match */
-            mc_wdrawelm_var(b_us, tmp_e, tmp_line);
+            wchar_t *tmp_line;
+            mc_wdrawelm_var(b_us, tmp_e, &tmp_line);
             inverse = (wcslen(tmp_line)>1 &&
                          StrStr(tmp_line, look_for, case_matters));
+            free(tmp_line);
           } else
             inverse = 0;
         }
@@ -662,9 +670,11 @@ static void scrollback(void)
           tmp_e = mc_getline(b_us, y + b_us->ys - 1);
           if (wcslen(look_for) > 1) {
             /* quick scan for pattern match */
-            mc_wdrawelm_var(b_us, tmp_e, tmp_line);
+            wchar_t *tmp_line;
+            mc_wdrawelm_var(b_us, tmp_e, &tmp_line);
             inverse = (wcslen(tmp_line)>1 &&
                          StrStr(tmp_line, look_for, case_matters));
+            free(tmp_line);
           } else
             inverse = 0;
         }
diff --git a/src/window.c b/src/window.c
index 75f4c001818bef429d1b966a68713d8e437814f5..08b0c888451a4880d7a01e092d431560a9d20662 100644
--- a/src/window.c
+++ b/src/window.c
@@ -25,6 +25,7 @@
 #include <limits.h>
 #include <stdarg.h>
 #include <wchar.h>
+#include <assert.h>
 
 #include "port.h"
 #include "minicom.h"
@@ -1046,15 +1047,16 @@ void mc_wdrawelm(WIN *w, int y, ELM *e)
  * 'accumulate' one line of ELM's into a string
  * WHY: need this in search function to see if line contains search pattern
  */
-void mc_wdrawelm_var(WIN *w, ELM *e, wchar_t *buf)
+void mc_wdrawelm_var(WIN *w, ELM *e, wchar_t **buf)
 {
-  int x, c = 0;
+  int sz = w->x2 - w->x1 + 2;
+  *buf = malloc(sizeof(**buf) * sz);
+  assert(*buf);
 
-  /* MARK updated 02/17/94 - Fixes bug, to do all 80 cols, not 79 cols */
-  for (x = w->x1; x <= w->x2; x++) {
-    buf[c++] = e->value;
-    e++;
-  }
+  (*buf)[sz - 1] = 0;
+
+  for (int c = 0; c < sz - 1; c++, e++)
+    (*buf)[c] = e->value;
 }
 
 /*
diff --git a/src/window.h b/src/window.h
index 1b8eb12a77f4e96ec80193175ebcfeb8a1192616..0f7eeaea55a3c15bccc2e5a0abb4374ab6834e65 100644
--- a/src/window.h
+++ b/src/window.h
@@ -186,7 +186,7 @@ int win_init(int fg, int bg, int attr);
 #endif
 /* fmg 8/20/97: both needed by history search section */
 void mc_wdrawelm_inverse( WIN *w, int y, ELM *e);
-void mc_wdrawelm_var(WIN *w, ELM *e, wchar_t *buf);
+void mc_wdrawelm_var(WIN *w, ELM *e, wchar_t **buf);
 void mc_clear_window_simple(WIN *w);
 
 /*
